// <auto-generated />
using System;
using BotTemplate.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BotTemplate.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BotTemplate.DAL.Entities.ConcreteTradingPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountPrecision")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountToSellOrBuyInQuoteCurrency")
                        .HasColumnType("decimal(36,18)");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<decimal>("DailyPriceChangePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DailyVolume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DisabledUntil")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuyingEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPermanentlyDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTimestampWithLowVolume")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LatestPrice")
                        .HasColumnType("decimal(36,18)");

                    b.Property<int>("PricePrecision")
                        .HasColumnType("int");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)")
                        .HasMaxLength(48);

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("TradingPairs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPrecision = 6,
                            AmountToSellOrBuyInQuoteCurrency = 0m,
                            BaseCurrency = "BTC",
                            DailyPriceChangePercentage = 0m,
                            DailyVolume = 0m,
                            IsActive = true,
                            IsBuyingEnabled = false,
                            IsPermanentlyDisabled = false,
                            LatestPrice = 0m,
                            PricePrecision = 2,
                            QuoteCurrency = "USDT",
                            Symbol = "BTCUSDT"
                        },
                        new
                        {
                            Id = 1200,
                            AmountPrecision = 6,
                            AmountToSellOrBuyInQuoteCurrency = 0m,
                            BaseCurrency = "BTC",
                            DailyPriceChangePercentage = 0m,
                            DailyVolume = 0m,
                            IsActive = true,
                            IsBuyingEnabled = false,
                            IsPermanentlyDisabled = false,
                            LatestPrice = 0m,
                            PricePrecision = 2,
                            QuoteCurrency = "EUR",
                            Symbol = "BTCEUR"
                        },
                        new
                        {
                            Id = 1400,
                            AmountPrecision = 2,
                            AmountToSellOrBuyInQuoteCurrency = 0m,
                            BaseCurrency = "EUR",
                            DailyPriceChangePercentage = 0m,
                            DailyVolume = 0m,
                            IsActive = true,
                            IsBuyingEnabled = true,
                            IsPermanentlyDisabled = false,
                            LatestPrice = 0m,
                            PricePrecision = 4,
                            QuoteCurrency = "USDT",
                            Symbol = "EURUSDT"
                        },
                        new
                        {
                            Id = 1600,
                            AmountPrecision = 6,
                            AmountToSellOrBuyInQuoteCurrency = 0m,
                            BaseCurrency = "BTC",
                            DailyPriceChangePercentage = 0m,
                            DailyVolume = 0m,
                            IsActive = true,
                            IsBuyingEnabled = false,
                            IsPermanentlyDisabled = false,
                            LatestPrice = 0m,
                            PricePrecision = 2,
                            QuoteCurrency = "BUSD",
                            Symbol = "BTCBUSD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.TakeProfitOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BalanceAfterSell")
                        .HasColumnType("decimal(36,18)");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("Received")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("SellAmount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TakeProfitOrders");
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.Trade<BotTemplate.DAL.Entities.ConcreteTradingPair>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("AmountFilled")
                        .HasColumnType("decimal(36,18)");

                    b.Property<int?>("BuyTradeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FilledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestSellTradeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidOrReceived")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(36,18)");

                    b.Property<decimal>("PriceDifferenceWithCandleSticks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnType("decimal(36,18)");

                    b.Property<int>("TradingPairId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("BuyTradeId");

                    b.HasIndex("LatestSellTradeId");

                    b.HasIndex("TradingPairId");

                    b.ToTable("Trades");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Trade<ConcreteTradingPair>");
                });

            modelBuilder.Entity("BotTemplate.DAL.Entities.ConcreteTrade", b =>
                {
                    b.HasBaseType("TradingBot.DAL.Shared.Entities.Trade<BotTemplate.DAL.Entities.ConcreteTradingPair>");

                    b.HasIndex("Side");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Trades");

                    b.HasDiscriminator().HasValue("ConcreteTrade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TradingBot.DAL.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TradingBot.DAL.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingBot.DAL.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TradingBot.DAL.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.RefreshToken", b =>
                {
                    b.HasOne("TradingBot.DAL.Shared.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingBot.DAL.Shared.Entities.Trade<BotTemplate.DAL.Entities.ConcreteTradingPair>", b =>
                {
                    b.HasOne("TradingBot.DAL.Shared.Entities.Trade<BotTemplate.DAL.Entities.ConcreteTradingPair>", "BuyTrade")
                        .WithMany()
                        .HasForeignKey("BuyTradeId");

                    b.HasOne("TradingBot.DAL.Shared.Entities.Trade<BotTemplate.DAL.Entities.ConcreteTradingPair>", "LatestSellTrade")
                        .WithMany()
                        .HasForeignKey("LatestSellTradeId");

                    b.HasOne("BotTemplate.DAL.Entities.ConcreteTradingPair", "TradingPair")
                        .WithMany()
                        .HasForeignKey("TradingPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
